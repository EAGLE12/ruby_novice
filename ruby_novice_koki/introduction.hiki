!序論

!!目的

Rubyは本格的なオブジェクト指向プログラムが記述できる汎用性の高い日本発のオープンソースである．Rubyは初心者に分かり易く,プログラム教育にもスムーズに活用できるメリットがある[1].

西谷研究室に在籍している学生は，Rubyプログラミングを修得するために初心者向けの問題集を使って学習している．
さらに，進捗状況の管理や指導者からの添削をより容易におこなえるように改善するため，バージョン管理ソフトGitHubを利用するシステム(ruby_novice)を開発している
そこでは，Rubyプログラミングで重要となるテスト駆動をおこなえる環境を提供している．これにより，学習者自身が出力チェックできるようにしRubyプログラミングにおけるテスト実行に自然と慣れるような学習形態を目指している．
本研究はRuby初心者が文法だけでなく，Rubyプログラミングにおける振舞いを身につけるための支援ソフトを開発する．

!!開発環境の現状
!!!Github
Githubは，コンピュータープログラムの元となるソースコードをインターネット上で管理するためのサービスである.複数人が携わるソフトウェア開発において,ソースコードの共有や，バージョン管理といった作業は必要不可欠となる[2].

本研究ではGithubを使用し，進捗状況の管理や指導者からの添削をより容易できるようにする.本研究では，下記の図のように　Githubを利用している．

*Githubのしくみ

{{attach_view(ruby_novice.002.jpg, ruby_novice_koki)}}

ここからは，上記の図を参考にしながらGithubを利用した作業の流れを段階を踏んで示します．
!!!!進捗状況の報告
まずは本研究での進捗状況の報告までの簡単な流れは以下の通りである．

1, ファイルを作成する．

2, git remote -v: originが自分のアドレスでupstreamが先生のアドレスであるか確かめる．

3, git add -A: 編集操作をlocalのrepositoryに登録.

4, git commit: ファイルの追加や変更の履歴をリポジトリに保存．

5, git push origin master: 図の①の操作により,Githubのoriginへmasterをpush.

6, pull request: 図の②の操作により,Githubで自分のサイトに載せた変更を，先生のサイトに変更希望として出す．コメント欄で変更詳細を伝えることが可能．

基本的にローカルリポジトリで作業を行い，その作業内容をリモートポジトリ(Github)へプッシュする流れで行う．

!!!!添削後の作業の流れ
1, 先生がファイルを添削後,図の⑤の操作により，リモートリポジトリ(Github)にgit push．
2, git pull upstream master: 図の⑤の操作により，自分の開発中のファイルに反映．

このサイクルを繰り返して，研究または，課題を進めていきます．


それぞれの用語の説明は以下の通りである．
*リポジトリ:          ファイルやディレクトリの状態を保存する場所.
*ローカルリポジトリ:  自分のマシン内にあるリポジトリ.
*リモートリポジトリ:  サーバなどネットワーク上にあるリポジトリ.
*コミット(commit):    ファイルの追加や変更の履歴をリポジトリに保存すること.
*origin:              リポジトリの場所(URL)の別名．
*master:              ブランチの名前．
*プッシュ(push):      ファイルの追加や変更の履歴をリモートリポジトリにアップロードするための操作.


!!!TDD (Test Driven Development)
2000年代初期に開発手法として確立された「テスト駆動開発」（Test Driven Development）は,その後10年もの間で普及が進み,今や珍しくない開発スタイルの1つとなっている.
国内でも「アジャイルアカデミー」「TDD Boot Camp」などによる推進・普及活動が各地で活発化し,認知が広がっている[3].


テスト駆動開発は,簡単に言うとプログラムを書く前にテストコードを書くということです.プログラムが完成した後 にテストコードを書くのではなく,テストコードを先に書くことに大きな意味があります.
それは先に仕様を決め,テストコードを書くことによって自分が次にやることが明確になるためです.これにより作業効率も上がります.最初にいきなりプログラムを書くと,整理されていないプログラムが出来てしまいます.
しかしはじめにテストコードを書くことによって何をすべきか明確になるのでプログラムが書きやすくなります.他にTDDの目的としては,軽快なフィードバックの確保,きれいで動くコードの確保などによる開発の改善が挙げられます.
テスト駆動開発は, テストファーストによる追加・変更とリファクタリングによる設計改善という2つの活動で構成されます. 継続的にユニットテストを使って設計検討やチェック, リファクタリングを行うことにより, テスタビリティに優れバグの少ないソースコードを実現することができます. 
